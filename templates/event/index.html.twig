{% extends 'base.html.twig' %}

{% block title %}Tournois
{% endblock %}

{% block body %}
	<div class="container my-5 p-4 rounded custom-bg">
		<div class="d-flex justify-content-between align-items-center mb-4">
			<h2 class="text-white">Tournois</h2>
			{% if is_granted('ROLE_USER') %}
				<a href="{{ path('app_event_create') }}" class="btn btn-primary">
					<i class="fas fa-plus me-1"></i>
					Proposer un événement
				</a>
			{% endif %}
		</div>

		{% if events is empty %}
			<p class="text-light">Aucun tournoi à venir ou en cours pour le moment.</p>
		{% else %}
			<div class="mb-3 d-flex justify-content-between align-items-center">
				<div class="btn-group" role="group">
					<button id="btnOngoing" class="btn btn-outline-light active">
						<i class="fas fa-play-circle me-1"></i>
						En cours
					</button>
					<button id="btnUpcoming" class="btn btn-outline-light">
						<i class="fas fa-clock me-1"></i>
						À venir
					</button>
				</div>
				<div>
					<label for="sort" class="form-label text-light me-2 mb-0">Trier par :</label>
					<select id="sort" class="form-select d-inline-block w-auto">
						<option value="date">Date</option>
						<option value="players">Nombre de joueurs</option>
						<option value="organizer">Organisateur</option>
					</select>
				</div>
			</div>

			{% set now = "now"|date("U") %}
			{% set ongoingEvents = events|filter(e => e.startDateTime.timestamp <= now and e.endDateTime.timestamp >= now) %}
			{% set upcomingEvents = events|filter(e => e.startDateTime.timestamp > now) %}

			<div id="ongoingEvents">
				<h4 class="text-info mb-3">Événements en cours</h4>
				{% if ongoingEvents is empty %}
					<p class="text-light">Aucun événement en cours actuellement.</p>
				{% else %}
					<div class="row" id="ongoingList">
						{% for event in ongoingEvents %}
							<div class="col-md-6 mb-3" data-date="{{ event.startDateTime.timestamp }}" data-players="{{ event.participantsCount }}" data-organizer="{{ event.organizer.pseudo|lower }}">
								{{ include('event/card.html.twig', { event: event, modalPrefix: 'tournement', modifiableEventIds: [] }) }}
							</div>
						{% endfor %}
					</div>
				{% endif %}
			</div>

			<div id="upcomingEvents" class="d-none">
				<h4 class="text-success mb-3">Événements à venir</h4>
				{% if upcomingEvents is empty %}
					<p class="text-light">Aucun événement à venir actuellement.</p>
				{% else %}
					<div class="row" id="upcomingList">
						{% for event in upcomingEvents %}
							<div class="col-md-6 mb-3" data-date="{{ event.startDateTime.timestamp }}" data-players="{{ event.participantsCount }}" data-organizer="{{ event.organizer.pseudo|lower }}">
								{{ include('event/card.html.twig', { event: event, modalPrefix: 'tournement', modifiableEventIds: [] }) }}
							</div>
						{% endfor %}
					</div>
				{% endif %}
			</div>
		{% endif %}
	</div>
{% endblock %}

{% block stylesheets %}
	{{ parent() }}
	<style>
		.card:hover {
			box-shadow: 0 0 12px rgba(0, 0, 0, 0.2);
			transform: translateY(-4px);
			transition: all 0.2s ease-in-out;
			cursor: pointer;
			filter: brightness(0.95);
		}
		.event-card {
			border: 3px solid #3399ff !important;
		}
		#ongoingEvents > h4,
		#upcomingEvents > h4 {
			color: #f8f9fa !important;
		}
	</style>
{% endblock %}

{% block javascripts %}
	{{ parent() }}
	<script>
		document.addEventListener('DOMContentLoaded', function () {
const btnOngoing = document.getElementById('btnOngoing');
const btnUpcoming = document.getElementById('btnUpcoming');
const ongoing = document.getElementById('ongoingEvents');
const upcoming = document.getElementById('upcomingEvents');
const sortSelect = document.getElementById('sort');

btnOngoing.addEventListener('click', () => toggleView(true));
btnUpcoming.addEventListener('click', () => toggleView(false));

function toggleView(showOngoing) {
btnOngoing.classList.toggle('active', showOngoing);
btnUpcoming.classList.toggle('active', ! showOngoing);
ongoing.classList.toggle('d-none', ! showOngoing);
upcoming.classList.toggle('d-none', showOngoing);
}

sortSelect.addEventListener('change', () => {
['ongoingList', 'upcomingList'].forEach(listId => sortEventList(listId, sortSelect.value));
});

function sortEventList(listId, sortBy) {
const container = document.getElementById(listId);
if (! container) 
return;


const items = Array.from(container.children);
items.sort((a, b) => {
let aVal = a.dataset[sortBy];
let bVal = b.dataset[sortBy];

if (sortBy === 'organizer') {
return aVal.localeCompare(bVal);
} else {
return(parseInt(aVal, 10) || 0) - (parseInt(bVal, 10) || 0);
}
});
items.forEach(item => container.appendChild(item));
}

// Event delegation pour les étoiles
document.body.addEventListener('click', function (e) {
if (e.target.classList.contains('fa-star-toggle')) {
e.stopPropagation();
const star = e.target;
const eventId = star.dataset.eventId;

if (!window.csrfToken) {
console.error('CSRF token manquant');
return;
}

fetch('/favoris/toggle/' + eventId, {
method: 'POST',
headers: {
'X-CSRF-TOKEN': window.csrfToken,
'X-Requested-With': 'XMLHttpRequest'
}
}).then(response => response.json()).then(data => {
if (data.status === 'added') {
star.classList.replace('fa-regular', 'fa-solid');
star.title = 'Retirer des favoris';
} else if (data.status === 'removed') {
star.classList.replace('fa-solid', 'fa-regular');
star.title = 'Ajouter aux favoris';
}
console.log('Favori togglé:', data);
}).catch(error => console.error('Erreur toggle favori:', error));
}
});
});
	</script>
{% endblock %}
