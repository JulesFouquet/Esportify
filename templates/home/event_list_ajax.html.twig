<div>
	{# --- Événements en cours --- #}
	<section class="mb-5">
		<h3>Événements en cours</h3>
		{% set ongoingEvents = events|filter(event => event.startDateTime <= "now"|date and event.endDateTime >= "now"|date) %}

		{% if ongoingEvents|length == 0 %}
			<p>Aucun événement en cours actuellement.</p>
		{% elseif ongoingEvents|length <= 3 %}
			<div class="row">
				{% for event in ongoingEvents %}
					<div class="col-md-4 mb-4">
						{{ include('event/_event_card.html.twig', { event: event }) }}
					</div>
				{% endfor %}
			</div>
		{% else %}
			<div id="ongoingCarousel" class="carousel slide" data-bs-ride="carousel">
				<div class="carousel-inner">
					{% for chunk in ongoingEvents|batch(3, null) %}
						<div class="carousel-item {% if loop.first %}active{% endif %}">
							<div class="row">
								{% for event in chunk if event is not null %}
									<div class="col-md-4 mb-4">
										{{ include('event/_event_card.html.twig', { event: event }) }}
									</div>
								{% endfor %}
							</div>
						</div>
					{% endfor %}
				</div>
				<button class="carousel-control-prev" type="button" data-bs-target="#ongoingCarousel" data-bs-slide="prev">
					<span class="carousel-control-prev-icon" aria-hidden="true"></span>
					<span class="visually-hidden">Précédent</span>
				</button>
				<button class="carousel-control-next" type="button" data-bs-target="#ongoingCarousel" data-bs-slide="next">
					<span class="carousel-control-next-icon" aria-hidden="true"></span>
					<span class="visually-hidden">Suivant</span>
				</button>
			</div>
		{% endif %}
	</section>

	{# --- Événements à venir --- #}
	<section class="mb-5">
		<h3>Événements à venir</h3>
		{% set upcomingEvents = events|filter(event => event.startDateTime > "now"|date) %}

		{% if upcomingEvents|length == 0 %}
			<p>Aucun événement à venir actuellement.</p>
		{% elseif upcomingEvents|length <= 3 %}
			<div class="row">
				{% for event in upcomingEvents %}
					<div class="col-md-4 mb-4">
						{{ include('event/_event_card.html.twig', { event: event }) }}
					</div>
				{% endfor %}
			</div>
		{% else %}
			<div id="upcomingCarousel" class="carousel slide" data-bs-ride="carousel">
				<div class="carousel-inner">
					{% for chunk in upcomingEvents|batch(3, null) %}
						<div class="carousel-item {% if loop.first %}active{% endif %}">
							<div class="row">
								{% for event in chunk if event is not null %}
									<div class="col-md-4 mb-4">
										{{ include('event/_event_card.html.twig', { event: event }) }}
									</div>
								{% endfor %}
							</div>
						</div>
					{% endfor %}
				</div>
				<button class="carousel-control-prev" type="button" data-bs-target="#upcomingCarousel" data-bs-slide="prev">
					<span class="carousel-control-prev-icon" aria-hidden="true"></span>
					<span class="visually-hidden">Précédent</span>
				</button>
				<button class="carousel-control-next" type="button" data-bs-target="#upcomingCarousel" data-bs-slide="next">
					<span class="carousel-control-next-icon" aria-hidden="true"></span>
					<span class="visually-hidden">Suivant</span>
				</button>
			</div>
		{% endif %}
	</section>
</div>

<style>
	.card:hover {
		box-shadow: 0 0 12px rgba(0, 0, 0, 0.2);
		transform: translateY(-4px);
		transition: all 0.2s ease-in-out;
		cursor: pointer;
		filter: brightness(0.95);
	}
</style>

<script>
	function initStarToggles() { // Remplacer chaque étoile par un clone pour supprimer les anciens listeners
document.querySelectorAll('.fa-star-toggle').forEach(star => {
const newStar = star.cloneNode(true);
star.parentNode.replaceChild(newStar, star);
});

// Réattacher proprement les événements
document.querySelectorAll('.fa-star-toggle').forEach(star => {
star.addEventListener('click', function (event) {
event.preventDefault();
event.stopPropagation();

const eventId = this.dataset.eventId;
const starElement = this;

fetch(`/favoris/toggle/${eventId}`, {
method: 'POST',
headers: {
'X-Requested-With': 'XMLHttpRequest',
'Content-Type': 'application/json'
}
}).then(response => response.json()).then(data => {
if (data.status === 'added') {
starElement.classList.remove('fa-regular');
starElement.classList.add('fa-solid');
} else if (data.status === 'removed') {
starElement.classList.remove('fa-solid');
starElement.classList.add('fa-regular');
}
}).catch(error => {
console.error('Erreur lors du toggle favori:', error);
});
});
});
}

// Appel initial (et à rappeler après chaque render AJAX)
initStarToggles();
</script>
